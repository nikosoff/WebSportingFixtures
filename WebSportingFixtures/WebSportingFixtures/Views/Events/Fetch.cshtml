@using WebSportingFixtures.Core.Models
@model IEnumerable<RawEvent>

@{
    ViewBag.Title = "Fetch & Store evetns";
}

@Html.AntiForgeryToken()
@if (Model.Count() != 0)
{
    for (int i = 0; i < Model.Count(); i++)
    {
        var homeElement = "homeTeam" + @i;
        var awayElement = "awayTeam" + @i;
        var statusElement = "eventStatus" + @i;
        var approveElement = "approve" + @i;
        var errorElement = "event" + @i;

        <input type="text" id=@homeElement value="@Model.ElementAt(i).Home" name="@homeElement" onclick="getSuggestions(@homeElement, 'click')" oninput="getSuggestions(@homeElement, 'input')" />
        <input type="text" id=@awayElement value="@Model.ElementAt(i).Away" name="@awayElement" onclick="getSuggestions(@awayElement, 'click')" oninput="getSuggestions(@awayElement, 'input')" />
        <select id="@statusElement" name="@statusElement" asp-items="Html.GetEnumSelectList<Status>()"></select>
        <input id="@approveElement" type="submit" name="approve" value="Approve" onclick="sendRequest(@homeElement, @awayElement, @statusElement, @approveElement, @errorElement, @Model.Count())" />
        <span id="@errorElement"></span>
        <br />
        <br />
    }
    <a id="backButton" asp-action="Index">Back</a>
}
else
{
    <h2>All the events has been stored</h2>
    <a asp-action="Index">Back</a>
}

<script>

    countApproved = 0;

    function sendRequest(homeElement, awayElement, statusElement, approveElement, errorElement, numberOfRawEvents) {

        countApproved++;
        var antiforgeryToken = document.getElementsByName("__RequestVerificationToken")[0].value;
        var request = new XMLHttpRequest();
        request.onreadystatechange = function () {
            if (request.readyState === 4 && request.status === 200) {

                var response = JSON.parse(request.responseText);

                if (response.status == "Success") {
                    homeElement.disabled = true;
                    awayElement.disabled = true;
                    statusElement.disabled = true;
                    approveElement.disabled = true;
                    errorElement.innerHTML = "The event has been stored";
                    if (countApproved === numberOfRawEvents)
                        document.getElementById("backButton").click();
                }
                else {
                    countApproved--;
                    if (response.status === "HomeTeamDoesNotExists")
                        errorElement.innerHTML = "Home team with name \"" + homeElement.value + "\" does not exist in our database";
                    else if (response.status === "AwayTeamDoesNotExists")
                        errorElement.innerHTML = "Away team with name \"" + awayElement.value + "\" does not exist in our database";
                    else if (response.status === "EventAlreadyExists")
                        errorElement.innerHTML = "The event " + homeElement.value + " - " + awayElement.value + " is already exists";
                    else if (response.status === "EventWithSameTeams")
                        errorElement.innerHTML = "The provided event " + homeElement.value + " - " + awayElement.value + " has two teams with the same name.This is not allowed.";
                    else if (response.status === "InvalidHomeTeamName")
                        errorElement.innerHTML = "The name of home team is required";
                    else if (response.status === "InvalidAwayTeamName")
                        errorElement.innerHTML = "The name of away team is required";
                    else if (response.status === "Undefined")
                        errorElement.innerHTML = "Event \"" + homeElement.value + " - " + awayElement.value + "\" could not be inserted due to database error";
                }
            }
        };

        request.open('POST', 'http://localhost:63933/Events/Fetch', true);
        request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        request.setRequestHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
        request.setRequestHeader("Upgrade-Insecure-Requests", "1");
        request.send("__RequestVerificationToken=" + antiforgeryToken + "&Home=" + homeElement.value + "&Away=" + awayElement.value + "&Status=" + statusElement.value);

    }

    function getSuggestions(team, event) {

        var input = document.getElementById(team.id);

        var request = new XMLHttpRequest();
        request.onreadystatechange = function (response) {
            if (request.readyState === 4 && request.status === 200) {

                var possibleTeams = JSON.parse(request.responseText);
                $('#' + team.id).autocomplete({
                    minLength: 0,
                    source: function (request, response) {
                        response($.ui.autocomplete.filter(
                            possibleTeams, ""));
                    }
                }).dblclick(function () {
                    $(this).autocomplete("search");
                });

                if (event == 'click')
                    $('#' + team.id).dblclick();
            }
        };

        request.open('GET', 'http://localhost:63933/Events/SuggestedTeams?givenTeamName=' + input.value, true);
        request.send(null);

    }
</script>